name: Test

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint
    timeout-minutes: 10
    strategy:
      matrix:
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
      - uses: golangci/golangci-lint-action@v3
        with:
          # must be specified without patch version
          version: v1.45

  format:
    name: Format
    strategy:
      matrix:
        platform: [ubuntu-latest]
        go: [1.19.3]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Install go 1.19
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}
      - name: Check formatting
        run: |
          make format-check

  vulnerability-check:
    name: "Vulnerability check"
    strategy:
      matrix:
        platform: [ubuntu-latest]
        go: [1.19.3]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Install go 1.19
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}
      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest
      - name: Run vulnerability check
        run: |
          echo "$(govulncheck ./... 2>&1 | tee vulnerability_report.out)"          
          test -n "$(grep 'No vulnerabilities found.' vulnerability_report.out)"

  test:
    strategy:
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
        go: [1.19.3]
    name: '${{ matrix.platform }} | ${{ matrix.go }}'
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Install go 1.19
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}
      - name: Install go-junit-report
        run: go install github.com/jstemmer/go-junit-report/v2@latest
      - name: Unit testing
        run: |
          mkdir -p build
          go test -v 2>&1 ./... | go-junit-report -set-exit-code > build/cbuildtests-${{ matrix.platform }}-amd64.xml
      - name: Install qemu (for Linux-Arm64)
        if: ${{ startsWith(runner.os, 'Linux') }}
        run: |
          sudo apt update
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            qemu-user-binfmt
      - name: Unit testing (for Linux-Arm64)
        if: ${{ startsWith(runner.os, 'Linux') }}
        run: |
          GOOS=linux GOARCH=arm64 go test -v 2>&1 ./... | go-junit-report -set-exit-code > build/cbuildtests-${{ matrix.platform }}-arm64.xml
      - name: Archive unit test results
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-result-${{ matrix.platform }}
          path: ./build/cbuildtests-*.xml
          if-no-files-found: error

  publish-test-results:
    if: github.event_name != 'release'
    name: "Publish Tests Results"
    needs: [ test ]
    runs-on: ubuntu-latest
    steps:
      - name: Download unit test report windows
        uses: actions/download-artifact@v3
        with:
          name: unit-test-result-windows-latest
          path: testreports/

      - name: Download unit test report linux
        uses: actions/download-artifact@v3
        with:
          name: unit-test-result-ubuntu-latest
          path: testreports/

      - name: Download unit test report macos
        uses: actions/download-artifact@v3
        with:
          name: unit-test-result-macos-latest
          path: testreports/

      - name: publish test results
        uses: EnricoMi/publish-unit-test-result-action/composite@v2
        with:
          commit: ${{ github.event.workflow_run.head_sha }}
          report_individual_runs: true
          junit_files: "testreports/*.xml"

  coverage:
    if: github.event_name != 'release'
    needs: [ test ]
    strategy:
      matrix:
        platform: [ubuntu-latest]
        go: [1.19.3]
    name: 'Coverage check'
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Install go 1.19
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}

      - name: Check coverage
        run: |
          make coverage-check

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./build/cover.out
          fail_ci_if_error: true
          functionalities: fix
