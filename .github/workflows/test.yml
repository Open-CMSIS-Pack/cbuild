name: Test

on: [push, pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint
    timeout-minutes: 10
    strategy:
      matrix:
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2
      - uses: golangci/golangci-lint-action@v2
        with:
          # must be specified without patch version
          version: v1.45

  format:
    name: Format
    strategy:
      matrix:
        platform: [ubuntu-latest]
        go: [1.19.3]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Install go 1.19
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}
      - name: Check formatting
        run: |
          make format-check

  vulnerability-check:
    name: "Vulnerability check"
    strategy:
      matrix:
        platform: [ubuntu-latest]
        go: [1.19.3]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Install go 1.19
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}
      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest
      - name: Run vulnerability check
        run: |
          echo "$(govulncheck ./... 2>&1 | tee vulnerability_report.out)"          
          test -n "$(grep 'No vulnerabilities found.' vulnerability_report.out)"

  test:
    strategy:
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
        go: [1.19.3]
    name: '${{ matrix.platform }} | ${{ matrix.go }}'
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Install go 1.19
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}
      - name: Unit testing
        run: |
          make coverage-check
      - name: Install qemu (for Linux-Arm64)
        if: ${{ startsWith(runner.os, 'Linux') }}
        run: |
          sudo apt update
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            qemu-user-binfmt
      - name: Unit testing (for Linux-Arm64)
        if: ${{ startsWith(runner.os, 'Linux') }}
        run: |
          make ARCH=arm64 coverage-check
